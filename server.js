const io = require('socket.io')();

/*
Back-end service files.
Usage of scoket.io for the live connection between the client and the server so the routes can be updated every minute.
In a real world scenario bus routes will be tracked/streamed by GPS tracking or IoT  or similardevices but in this module 
arrival times are simply generated by simple mathematical calculations based on route patterns.
*/


//Socket connection and setting up listners for the different stops (i.e Stop 1 and Stop 2)
io.on("connection", socket => {
  let d = new Date();

  //Listener for Stop 1
  socket.on('Stop1', function(){
    getApiAndEmit(socket,1)
    interval = setInterval(() =>getApiAndEmit(socket,1), (60 - d.getSeconds()) * 1000);
   });

     //Listener for Stop 2
   socket.on('Stop2', function(){
    getApiAndEmit(socket,2)
    interval = setInterval(() =>getApiAndEmit(socket,2), (60 - d.getSeconds()) * 1000);
   });

  socket.on("disconnect", () => {
    console.log("Client disconnected");
  });
});

  const getApiAndEmit = async (socket,stopId) => {

    try {
      let d = new Date();
    let routes;
   
    let arrival = d.getMinutes();
     // Each bus is 15 minutes apart so the schedule repeats every 15 minutes
    if(arrival>15)
    arrival= arrival%15;

    let nxtRoute1 =15-arrival; //this is Route 1  of Stop 1

    // Route 2 of Stop 1 and Route 1 of stop 2
    let nxtRoute2 =2+nxtRoute1;
    if(nxtRoute2 > 15)
    nxtRoute2 = nxtRoute2 - 15; 

    //Route 3 of Stop 1 and Route 2 of Stop 2
    let nxtRoute3 =4+nxtRoute1;
    if(nxtRoute3 > 15)
    nxtRoute3 =  nxtRoute3 - 15; 

    // This is Route 3 of stop 2
    let nxtRoute4 = 6 + nxtRoute1;
    if(nxtRoute4 > 15)
    nxtRoute4 =  nxtRoute4 - 15; 

    if(stopId==1)
    {
    routes ={
      "R1":[nxtRoute1,nxtRoute1+15],
      "R2":[nxtRoute2,nxtRoute2+15],
      "R3":[nxtRoute3,nxtRoute3+15]
    }
    data=socket.emit("Stop1",  JSON.stringify(routes)); 
  }
     
   else
   {
 
    routes = {"R1":[nxtRoute2,nxtRoute2+15],"R2":[nxtRoute3,nxtRoute3+15],"R3":[nxtRoute4,nxtRoute4+15]};
    data=socket.emit("Stop2",  JSON.stringify(routes)); 
   }
  
    } catch (error) {
      console.error(`Error: ${error.code}`);
    }
  };


const port = 8000;
io.listen(port);
console.log('listening on port ', port);